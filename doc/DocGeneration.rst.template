.. _Top:


.. title:: Ceylan-HOWTOs: About Documentation Generation


------------------------
Documentation Generation
------------------------


.. role:: raw-html(raw)
   :format: html

.. role:: raw-latex(raw)
   :format: latex


:raw-html:`<a name="howtos_top"></a>`

:raw-html:`<div class="banner"><p><em>Ceylan HOWTOs</em> <a href="http://howtos.esperide.org">browse latest</a> <a href="Ceylan-HOWTOs-english.pdf">get PDF</a> <a href="#howtos_top">go to top</a> <a href="#howtos_toc">go to toc</a> <a href="#howtos_bottom">go to bottom</a> <a href="Ceylan-HOWTOs-overview-english.html">go to HOWTOs</a> <a href="mailto:about(dash)ceylan-howtos(at)esperide(dot)com?subject=[Ceylan-HOWTOs]%20Remark%20about%20Documentation%20Generation">email us</a></p></div>`


:raw-html:`<center><img src="howtos-title.png" id="responsive-image-ultrasmall"></img>`


:Organisation: Copyright (C) 2022-GENERATION_YEAR_TAG Olivier Boudeville
:Contact: about (dash) howtos (at) esperide (dot) com
:Creation date: Wednesday, January 12, 2022
:Lastly updated: GENERATION_DATE_TAG


:raw-html:`<a name="howtos_toc"></a>`

.. _`table of contents`:


.. contents:: **Table of Contents**
  :local:
  :depth: 3


:raw-html:`</center>`


Objective
=========

We want to be able to generate, **from a single source**, at least two **documentation formats**:

- a set of **interlinked static web pages** (the most popular, flexible format)
- a single, **standalone PDF file** (convenient for offline reading, printing, etc.)

The document source shall be expressed in a simple, non-limiting, high-level syntax; in practice a rather standard, lightweight markup language.

All standard documentation elements shall be available (ex: title, tables, images, links, references, tables of content, etc.) and be customisable.

The resulting documents shall be quickly and easily generated, with proper error report, and be beautiful and user-friendly (ex: with well-configured LaTeX, with appropriate CSS, icons and features like banners, with proper rendering of equations).

Per-format overriding shall be possible (ex: to define different image sizes depending on web output or PDF one).

The whole documentation process shall be powered only by free software solutions, easily automated (ex: `with Make <Build.html>`_) and suitable for version control (ex: `with Git <Git.html>`_).



Our Recommended Approach
========================

We chose to rely on the `reStructuredText <https://en.wikipedia.org/wiki/ReStructuredText>`_ syntax and tools, also known as RST, a part of the `Docutils <https://docutils.sourceforge.io/>`_ project. We did not specifically rely on elements related to Python or the Sphinx toolchain.

We augmented reStructuredText with:

- a set of **make-based defines and rules** (automatic or explicit) that were aggregated in Ceylan-Myriad (see notably `GNUmakerules-docutils.inc <https://github.com/Olivier-Boudeville/Ceylan-Myriad/blob/master/doc/GNUmakerules-docutils.inc>`_ and the `generate-docutils.sh <https://github.com/Olivier-Boudeville/Ceylan-Myriad/blob/master/src/scripts/generate-docutils.sh>`_ generation script); this mechanism is layer-friendly, in the sense that all layers defined (directly or not) on top of Myriad are able by default to re-use these elements and to customise them if needed
- a **template** on which we rely for most documents, featuring notably a standard table (to specify usual metadata such as organisation, contact information, abstract, versions, etc.), a table of contents, conventions in terms of `title hierarchy`_ and, for the HTML output, a banner (a fixed, non-scrolling panel offering shortcuts, in the top-right corner of the page)
- a simple **tag-based system** to have the actual document markup (``*.rst``) directly generated from a higher-level source one (``*.rst.template``); in practice, if defined, only the latter element is edited by the user, and tags (such as ``*_VERSION_TAG``, ``*_DATE_TAG``, etc.) are automatically filled-in appropriately

Of course this website, and many others that we created, rely on this approach; as an example, one may look at the `sources of the current document <https://github.com/Olivier-Boudeville/Ceylan-HOWTOs/blob/master/doc/DocGeneration.rst.template>`_.



Technical Details
=================


.. _`how to render equations`:

Rendering Mathematical Elements
-------------------------------

With the RST toolchain, the PDF output, thanks to LaTeX, offers built-in high-quality rendering of mathematical elements such as equations, matrices, etc.

By default, the HTML output does not benefit from LaTeX, and remains significantly less pleasing to the eye, and less readable.

So we complement it by `MathJax <https://www.mathjax.org/>`_, a neat open-source "*JavaScript display engine for mathematics that works in all browsers*".

It shall thus be installed once for all first. For example, on Arch Linux, as ``root``, it is sufficient to execute:

.. code:: bash

 $ pacman -Sy mathjax


Then, to enable the use of MathJax for a given website based on Ceylan-Myriad, run from its root (often a ``doc`` directory):

.. code:: bash

 make create-mathjax-symlink


(this target is defined in `GNUmakerules-docutils.inc <https://github.com/Olivier-Boudeville/Ceylan-Myriad/blob/master/doc/GNUmakerules-docutils.inc>`_; it boils down to symlinking ``/usr/share/mathjax``; see also the `HOWTOs corresponding makefile <https://github.com/Olivier-Boudeville/Ceylan-HOWTOs/blob/master/doc/GNUmakefile>`_ to properly manage this dependency afterwards, notably when deploying web content)

The list of `TeX/LaTeX commands <http://docs.mathjax.org/en/latest/input/tex/macros/index.html>`_ supported by MathJax may be of use.


This allows to define inline mathematical elements, like :math:`P = \begin{pmatrix} 10 \\ 45\end{pmatrix}` (obtained with ``P = \\begin{pmatrix} 10 \\\\ 45\\end{pmatrix}``) or standalone ones, like:

.. math::
 M = \begin{bmatrix}
		a11 & a12 & ... & a1n \\
		a21 & a22 & ... & a2n \\
		... & ... & ... & ... \\
		am1 & am2 & ... & amn \\
	 \end{bmatrix}

obtained thanks to::

 M = \begin{bmatrix}
		a11 & a12 & ... & a1n \\
		a21 & a22 & ... & a2n \\
		... & ... & ... & ... \\
		am1 & am2 & ... & amn \\
	 \end{bmatrix}

For :math:`\phi: \mathbb{R} \rightarrow ]0,1[` (i.e. ``\phi: \mathbb{R} \rightarrow ]0,1[``), we may have :math:`P_e = \phi(m+\phi^{-1}(P_n))` is ``P_e = \phi(m+\phi^{-1}(P_n))``.

If :math:`\phi(x) = e^{x}/(1+e^{x})` (translating to ``\phi(x) = e^{x}/(1+e^{x})``), then:

.. math::

 P_e = \frac{P_n.e^{m}}{1 + P_n.(e^{m}-1)}


(translating to ``P_e = \frac{P_n.e^{m}}{1 + P_n.(e^{m}-1)}``)


A few other examples of resulting math-related outputs can be seen in `this section <https://myriad.esperide.org/#linear-conventions>`_.



Title Hierarchy
---------------

It must be consistent: a given type of subtitle must always be placed at the same level in the title hierarchy.

We rely on the markup conventions exposed in `this demonstration <https://github.com/Olivier-Boudeville/Ceylan-Myriad/blob/master/doc/demo-for-css-testing.rst>`_ file (created by David Goodger), whose `source is here <https://raw.githubusercontent.com/Olivier-Boudeville/Ceylan-Myriad/master/doc/demo-for-css-testing.rst>`_.

From the top-level title to the most nested ones:

- ``=``, on top and below the title (document title)
- ``-``, on top and below the title (document subtitle)
- ``=``, below the title (H1)
- ``-``, below the title (H2)
- ``.`` , below the title (H3)
- ``_``, below the title (H4)
- ``*``, below the title (H5)
- ``:``, below the title (H6)
- ``+``, below the title (H7)



Image Sizes
-----------

Responsive images, i.e. images that automatically adjust to fit the size of the screen, can be used. They are then defined for example thanks to:

.. code:: html

 <img src="foobar.png" id="responsive-image-large"></img>


Various standard sizes have been defined, all prefixed with ``responsive-image-``; from the biggest (95%) to the smallest (10%), as defined for example in `myriad.css <https://github.com/Olivier-Boudeville/Ceylan-Myriad/blob/master/doc/myriad.css>`_, they are: ``full``, ``large``, ``intermediate``, ``medium``, ``reduced``, ``small``, ``tiny``, ``xsmall``.



Multi-File Documents
--------------------


Targeting a Standalone Document
...............................

Although they tend to be less convenient to edit, longer documents may be split in a **set of RST source files** (the `Myriad documentation <https://github.com/Olivier-Boudeville/Ceylan-Myriad/tree/master/doc>`_ is an example of it; the `WOOPER documentation <https://github.com/Olivier-Boudeville/Ceylan-WOOPER/tree/master/doc>`_ is an example of the opposite approach, based on a single source file).


Targeting Interlinked Modular Documents
.......................................

In some cases, at least for the HTML output, the need is not to produce a single, large, monolithic document, but a set of interlinked ones (`the present HOWTO <http://howtos.esperide.org>`_ is an example thereof) that can be browsed as separate pages.

Then a convenient approach is to define different entry points for different output formats, like, for these HOWTOs, `this one for the HTML output <https://github.com/Olivier-Boudeville/Ceylan-HOWTOs/blob/master/doc/Ceylan-HOWTOs-overview-english.rst.template>`_ and `this one for the PDF output <https://github.com/Olivier-Boudeville/Ceylan-HOWTOs/blob/master/doc/Ceylan-HOWTOs-english.rst.template>`_.



Inner Links
-----------

Defining any title (ex: the ``"Rendering Mathematical Elements"`` one above) automatically introduces in turn a corresponding anchor, which, for the HTML output, can then be referenced from any page, for example as raw HTML (like `MyPage.html#rendering-mathematical-elements <DocGeneration.html#rendering-mathematical-elements>`_, or directly from the current page as `#rendering-mathematical-elements <#rendering-mathematical-elements>`_) or directly through RST in the document (ex: specified as ```Rendering Mathematical Elements`_``, resulting in: `Rendering Mathematical Elements`_).

Note the light transformation (spaces becoming dashes) of the specified name once a it is translated into a legit HTML anchor.

Extra local anchors (ex: that could be named ``"how to render equations"``) can also be specified anywhere in the document (ex: just before the previously mentioned title, so that it can be designated with other words), thanks to::

  .. _`how to render equations`:


It can then be referenced from the same page as `#how-to-render-equations <#how-to-render-equations>`_ or from another one as `MyPage.html#how-to-render-equations <DocGeneration.html#how-to-render-equations>`_.



Commenting
----------

To comment-out a block of text, just add ``..`` at the beginning of a line, then, from the next line, put that block, indented of at least one space.

All lines of a block shall start with the same whitespace. So, whenever a given block to comment is not left-justified (at least one of its lines starts with a different offset), prefer having all lines of such a block be indented of (at least) 4 spaces (i.e. a tabulation).

Otherwise, if using a single space to indent, as soon as a line of the block is to start with 3 spaces, whitespace-cleanup operations will combine them with the first one to form a tabulation (4 spaces in a row), and all lines of the commented block will not start with the same whitespaces, resulting, from the point of view of RST tools, in an invalid block.



Validating / Checking
---------------------

In addition to the verification of the messages reported when the document is built, some tools allow to perform some checks on a generated document.

Notably an online HTML page, or set of pages, can be verified by third-party tools like `this one <https://www.deadlinkchecker.com/>`_, to detect dead links.



Pointing to a Specific Moment in a Linked Video
-----------------------------------------------

It is as simple as designating, in an HTML link, the targeted second by suffixing the URL video filename with ``#t=DURATION_IN_SECONDS``, like in ``some-video.mp4#t=1473`` [#]_.

.. [#] With ``mplayer``, use the ``o`` hotkey to display elapsed durations.




Miscellaneous
=============


Conversion between Markup Formats
---------------------------------

`Pandoc <https://pandoc.org/>`_ is the tool of choice for such operations, as it often yields good results.

For example, in order to convert a page written in Mediawiki syntax, whose source content has been pasted in a ``old-content-in-mediawiki.txt`` file, into one that be specified in a GitLab wiki (hence in GFM markup, for *GitLab Flavored Markdown*) from a converted content, to be written in a ``converted-content.gfm`` file, one may use:

.. code:: bash

 $ pandoc old-content-in-mediawiki.txt --from=mediawiki --to=gfm --standalone -o converted-content.gfm

 # Or, for older versions of pandoc not supporting a gfm writer:
 $ pandoc old-content-in-mediawiki.txt --from=mediawiki --to=markdown_github --standalone -o converted-content.gfm


Then the content in ``converted-content.gfm`` file can be pasted in the target GitLab wiki page.

Another example is the conversion of a GitLab wiki page into a RST document (ex: then for a PDF generation):

.. code:: bash

 $ pandoc my-gitlab-wiki-extract.gfm --from=gfm --to=rst --standalone -o my-converted-content.rst

 # Or, for older versions of pandoc not supporting a gfm reader:
 $ pandoc my-gitlab-wiki-extract.gfm --from=markdown_github --to=rst --standalone -o my-converted-content.rst


Finally, if really needing to generate a Word document, an example may be:

.. code:: bash

 $ pandoc my-document.rst --from=rst --to=docx -o my-converted-document.docx



The lists of the input and output formats supported by Pandoc and of their corresponding command-line options is specified `here <https://pandoc.org/MANUAL.html#general-options>`_.

These options are also returned by: ``pandoc --list-input-formats`` and ``pandoc --list-output-formats`` (or, for older versions of pandoc, thanks to ``pandoc --help``).

An input file may not be encoded in UTF-8, which can result in::

 pandoc: Cannot decode byte '\xe9': Data.Text.Internal.Encoding.Fusion.streamUtf8: Invalid UTF-8 stream

In this case, the actual encoding shall be determined, for example with:

.. code:: bash

 $ file input.html
 input.html: HTML document, ISO-8859 text


Then the encoding may be changed before calling pandoc, for example like:

.. code:: bash

 $ iconv -f ISO-8859-1 -t utf-8 input.html | pandoc --from=html --to=markdown_github --standalone -o output.gfm



Transformation of PDF files
---------------------------

For that, one may use the ``pdftk`` tool, possibly with the ``convert`` one, which comes from `ImageMagick <http://www.imagemagick.org/>`_ (typically available thanks to a ``imagemagick`` package):

- to **split all pages of a PDF** in as many individual files (named ``pg_0001.pdf``, ``pg_0002.pdf``, etc.): ``pdftk document.pdf burst``
- to **convert a PDF file** (typically a single page) into a **PNG** one (typically in order to edit the PNG with The Gimp afterwards): ``convert pg_000x.pdf pg_000x.png``
- to convert (possibly back) a **PNG file to a PDF** one: ``convert pg_000x-modified.png pg_000x-modified.pdf``
- to **concatenate PDFs**: ``pdftk 1.pdf 2.pdf 3.pdf cat output 123.pdf``



Image Transformations
---------------------

One may rely on:

- `GIMP <https://www.gimp.org/>`_ (*GNU Image Manipulation Program*; corresponding, on Arch, to the ``gimp`` package)
- or on command-line `ImageMagick <https://imagemagick.org>`_ (on Arch, the ``imagemagick`` package, which provides notably the ``convert`` and ``display`` executables)


To invert/negate an image (swap colors with their complementary ones):

.. code:: bash

 $ convert source.png -negate target.png


See also the Myriad's automatic rules, which generate ``X-negated.png`` from ``X.png`` thanks to: ``make X-negated.png``.




UML Diagrams
------------

If `SysML <https://en.wikipedia.org/wiki/Systems_Modeling_Language>`_ can also be of interest, we focus here on `UML2 class diagrams <https://en.wikipedia.org/wiki/Class_diagram>`_ (one of the 14 types of diagrams provided by UML2).




Quick UML Cheat Sheet
.....................


Multiplicities
______________


A **multiplicity** is a definition of *cardinality* (i.e. number of elements) of some collection of elements.

It can be set for attributes, operations, and associations in a class diagram, and for associations in a use case diagram. The multiplicity is an indication of how many objects may participate in the given relationship.

It is defined as an inclusive interval based on non-negative integers, with ``*`` denoting an unlimited upper bound (not, for example, ``n``).

Most common multiplies are:

- no instance or one instance: ``0..1``
- any number of instances, including zero: ``*`` (shorthand for ``0..*``)
- exactly k instances: ``k`` (so, if k=5, ``5``)
- at least M instances: ``M..*`` (``2..*``)
- at least M instances, but no more than N (hence bounds included): ``M..N`` (e.g. ``3..5``)

For associations, the default multiplicity is automatically is ``0..1``, while new attributes and operations have a default multiplicity of ``1``.



Association
___________


An **association** is a relation between two classes (*binary association*) or more (*N-ary association*) that describes structural relationships between their instances.

For example a polygon may be defined from at least 3 vertices that it would reference, whereas a point may take part to any number of polygones (including none):

:raw-html:`<center><img src="uml_association_diagram.png" id="responsive-image-small"></img></center>`
:raw-latex:`\begin{figure}[h] \centering \includegraphics[scale=0.6]{uml_association_diagram.png} \end{figure}`


(see the `sources <https://github.com/Olivier-Boudeville/Ceylan-HOWTOs/tree/master/doc/uml_association_diagram.graph>`_ of this diagram)


The **multiplicity** of an endpoint denotes the number of instances of the corresponding class that may take part to this association. For example, at least 3 points are needed to form a polygon, whereas any number of polygons can include a given point.

In UML the **direction** of the association is easily ambiguous (here we have to rely on external knwoledge to determine whether a polygon is composed of points, of if a point is composed of polygons). Adding a chevron (like ``>`` or ``<``, e.g. ``"references >"`` ; ideally this should be a small solid triangle) to the text is not a good solution either, as the layout may place the respective endpoints in any relative position. Adding an arrow to the end of the line segment cannot be done either, as it would denote the *navigability* of the association instead.




Aggregation
___________


An **aggregation** is a specific association that denotes that an instance of a class (ex: ``Library``) is to loosely contain instances of another class (ex: ``Book``), in the sense that the lifecycle of the contained classes is not strongly dependent on the one of the container (ex: books will still exist even if the library is dismantled).

Here a library may contain any number of books (possibly none), and a given book belongs to at most one library.

:raw-html:`<center><img src="uml_aggregation_diagram.png" id="responsive-image-small"></img></center>`
:raw-latex:`\begin{figure}[h] \centering \includegraphics[scale=0.6]{uml_aggregation_diagram.png} \end{figure}`

(see the `sources <https://github.com/Olivier-Boudeville/Ceylan-HOWTOs/tree/master/doc/uml_aggregation_diagram.graph>`_ of this diagram)



Composition
___________

A **composition** is a specific association that denotes that an instance of a class (ex: ``HumanBeing``) is to own instances of another class (ex: ``Leg``), in the sense that the lifecycle of the contained classes fully depends on the one of the container (here, if a human being dies, his/her legs will not exist anymore either).

Here a human being has exactly 2 legs, and any given leg belongs to exactly one human being (therefore this model does not account for one-legged persons).

:raw-html:`<center><img src="uml_composition_diagram.png" id="responsive-image-small"></img></center>`
:raw-latex:`\begin{figure}[h] \centering \includegraphics[scale=0.6]{uml_composition_diagram.png} \end{figure}`

(see the `sources <https://github.com/Olivier-Boudeville/Ceylan-HOWTOs/tree/master/doc/uml_composition_diagram.png>`_ of this diagram)



Inheritance
___________

An **inheritance** relationship is a specific association that denotes that a class (ex: ``HumanBeing``) is a specific case of a more general one (ex: ``Animal``), and thus that an instance of the first one is also an instance of the second one ("is-a" relationship).

Here a human being is a specific animal.


:raw-html:`<center><img src="uml_inheritance_diagram.png" id="responsive-image-small"></img></center>`
:raw-latex:`\begin{figure}[h] \centering \includegraphics[scale=0.6]{uml_inheritance_diagram.png} \end{figure}`

(see the `sources <https://github.com/Olivier-Boudeville/Ceylan-HOWTOs/tree/master/doc/uml_inheritance_diagram.graph>`_ of this diagram)



Tooling
.......

In a design phase, one may prefer lightweight tools like `Graphviz <https://graphviz.org/>`_, `PlantUML <https://plantuml.com/>`_ or even `Dia <https://en.wikipedia.org/wiki/Dia_(software)>`_.

As long as the architecture of a framework is not stabilised, having one's tool determine by itself the layout of the rendering (rather than having to place manually one's graphical components) is surely preferable.

For that we use Graphviz, with `our own build conventions <https://github.com/Olivier-Boudeville/Ceylan-Myriad/blob/master/doc/GNUmakerules-docutils.inc>`_.

For example, supposing `this diagram example <https://github.com/Olivier-Boudeville/Ceylan-Myriad/blob/master/doc/uml_class_diagram_example.graph>`_, i.e. a source file named ``uml_class_diagram_example.graph``:

.. code:: bash

 $ make uml_class_diagram_example.png
 # or, to force a regeneration and a displaying of the result:
 $ make clean uml_class_diagram_example.png VIEW_GRAPH=true


This example results in the following diagram:

:raw-html:`<center><img src="uml_class_diagram_example.png" id="responsive-image-small"></img></center>`
:raw-latex:`\begin{figure}[h] \centering \includegraphics[scale=0.6]{uml_class_diagram_example.png} \end{figure}`

(see the `sources <https://github.com/Olivier-Boudeville/Ceylan-HOWTOs/tree/master/doc/uml_class_diagram_example.graph>`_ of this diagram)


:raw-html:`<a name="howtos_bottom"></a>`
