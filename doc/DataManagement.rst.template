.. _Top:


.. title:: Ceylan-HOWTOs: About Data Management


---------------
Data Management
---------------


.. role:: raw-html(raw)
   :format: html

.. role:: raw-latex(raw)
   :format: latex


:raw-html:`<a name="howtos_top"></a>`

:raw-html:`<div class="banner"><p><em>Ceylan HOWTOs</em> <a href="http://howtos.esperide.org">browse latest</a> <a href="Ceylan-HOWTOs-english.pdf">get PDF</a> <a href="#howtos_top">go to top</a> <a href="#howtos_toc">go to toc</a> <a href="#howtos_bottom">go to bottom</a> <a href="Ceylan-HOWTOs-overview-english.html">go to HOWTOs</a> <a href="mailto:about(dash)ceylan-howtos(at)esperide(dot)com?subject=[Ceylan-HOWTOs]%20Remark%20about%20Data%20Management">email us</a></p></div>`


:raw-html:`<center><img src="howtos-title.png" id="responsive-image-ultrasmall"></img>`


:Organisation: Copyright (C) 2022-GENERATION_YEAR_TAG Olivier Boudeville
:Contact: about (dash) howtos (at) esperide (dot) com
:Creation date: Saturday, November 20, 2021
:Lastly updated: GENERATION_DATE_TAG


:raw-html:`<a name="howtos_toc"></a>`

.. _`table of contents`:


.. contents:: **Table of Contents**
  :local:
  :depth: 2


:raw-html:`</center>`



Overview
========

This section concentrates information about **data management**, including data **formats** and data **processing tools**.



General-Purpose Data Format
===========================

Such a format is typically useful to hold configuration information.

We prefer `JSON <https://en.wikipedia.org/wiki/JSON>`_ to, for example, `YAML <https://en.wikipedia.org/wiki/YAML>`_, due to the Python-style indentation on which the latter relies in order to indicate nesting.


Language-Independent Data Formats
---------------------------------


JSON
....

A JSON document is in plain-text and may contain:

- basic types:

  - Number: ``2`` or ``4.1``
  - String: ``"I am a string"``
  - Boolean: ``true`` or ``false``
  - ``null``: to denote an empty value

- attribute-value pairs (ex: ``"firstName": "John")``
- "arrays" (ordered lists), ex: ``"myNumbers": ["12", "7", "4"]``
- "objects" (collection of name-value pairs), ex:

.. code:: json

 {

   "address": {
	  "streetAddress": "21 2nd Street",
	  "city": "New York"
   }

 }


The order in arrays is expected to be preserved, but not the one of the elements in an object.

Defining an element (ex: an attribute-value pair) more than once is allowed, and the last instance thereof will be the one kept.

Ex:

.. code:: json

 {
  "tcp_port": 8084,
  "tcp_port": 8085,
  [...]
 }

Here, once the document is parsed, ``tcp_port`` will be considered equal to ``8085``.



Pretty-Printing
_______________


On GNU/Linux, one may rely on ``jq``, a command-line JSON processor.

Ex: ``jq . my_document.json``.



Validating
__________

One may consider that a given document is a legit JSON one iff ``jq type`` reports a non-empty output.

Example:

.. code:: bash

 $ jq type my_document.json
 "object"



Example
_______

Regarding syntax, a `typical JSON document <https://en.wikipedia.org/wiki/JSON#Syntax>`_ is:

.. code:: json

 {
   "firstName": "John",
   "__comment": "This is a comment!",
   "lastName": "Smith",
   "isAlive": true,
   "age": 27,
   "address": {
	 "streetAddress": "21 2nd Street",
	 "city": "New York",
	 "state": "NY",
	 "postalCode": "10021-3100"
   },
   "phoneNumbers": [
	 {
	   "type": "home",
	   "number": "212 555-1234"
	 },
	 {
	   "type": "office",
	   "number": "646 555-4567"
	 }
   ],
   "children": [],
   "spouse": null
 }



Specifying comments
___________________

With JSON, there is, on purpose, no built-in way to add comments.

The sole solution/workaround is to add comments as specific fields, although they will end up as data like the other fields.

We recommend to mark them specifically (ex: as ``__comment``) so that they should not interfere with the "real" data. As an example, see the second key of the previous JSON document.




YAML
....

`YAML <https://yaml.org/>`_ is a data serialization language for all programming languages.

We prefer the ``.yaml`` extension to the ``.yml`` one.

No tabulation should be used for indentation, only spaces, and preferably a fixed amount of them; we used to prefer 4, now 2, since it allows to properly align the items listed with a dash (ex: "``- I am an item``").

With Emacs, the `Yaml Mode <https://www.emacswiki.org/emacs/YamlMode>`_ may be of help.




Erlang-Friendly Data Format: ETF
--------------------------------

Such a format is typically useful to hold configuration information in an Erlang context.

We recommend the use of `ETF <http://myriad.esperide.org/#etf>`_ (the *Erlang Term Format*), that we find particularly useful and even more suitable than JSON (entry order preserved, comments supported, etc.).





.. _`data tools`:


Data-related Processing Tools
=============================

Whenever needing to perform **numerical operations** on data, we recommend the use of `Scilab <https://www.scilab.org/>`_  or `GNU Octave <https://www.gnu.org/software/octave/>`_, which are the two major open-source alternatives to `MATLAB <https://en.wikipedia.org/wiki/MATLAB>`_.

As such, the three of them support mostly the same syntax (even if Scilab puts less emphasis on syntactic compatibility with MATLAB than Octave does).

From now on, the specific tool being used among the two MATLAB alternatives will not be specifically mentioned (mentioning "the tool" instead). We tried both alternatives and had more issues (build/installation, proper display) with Scilab, so we mostly used Octave.



Common Hints About Scilab and Octave
------------------------------------


Syntax
......

Putting a semicolon at the end of statement prevents the console from printing the corresponding value (answer, variable assignment, etc.).



Array-based Functions
.....................

Many functions are defined so that they can be called also with *arrays* of parameters, instead of just standalone values. For that, a dot/period-based syntax has been introduced so that each element of an input vector is applied to the function in turn. A key understanding is that such a dot applies not to variables but to operators; for example ``2*x.^2+1`` shall not be read as ``2*(x.)^2+1`` but as ``2*x(.^)2+1``.

As an example, a :math:`\phi` function can be defined [#]_ as :math:`\phi(x) = e^{x}/(1+e^{x})`:

.. code:: matlab

 function retval = phi (x)
  retval = exp(x)./(1+exp(x));
 endfunction

.. [#] Note that, for basic operation like additions, the ``.+`` operator has been deprecated in favor of just ``+``.

Then this function can be called either with a standalone value:

.. code:: matlab

 phi(1)
 ans = 0.7311

or with an array thereof (a vector):

.. code:: matlab

 phi([1,2])
 ans =
   0.7311   0.8808



Outputs
.......

Beware to the lower-precision of textual outputs, which may be misleading (ex: use ``format long`` with Octave to request 15 significant figures).



Script Files
............

Rather than being directly interpreted (ex: from a pasted text), a series of statements can be gathered in a script file (a bit different from a function file [#]_) that can be loaded and executed afterwards.

.. [#] A so-called "function file" is one that starts with a function definition and that must only be called from a "script file".


Their conventional extension in ``m`` (ex: ``foobar.m``), due to the MATLAB legacy.

Avoid dashes in the script filenames, as it may be interpreted as ``minus``; prefer underscores (ex: ``phi_exp.m`` rather than ``phi-exp.m``).


An example of script, named ``phi_exp.m``:

.. code:: matlab

 # An initial comment prevents Octave from thinking that this
 # is a function file:
 1;

 # The function name can be freely chosen, it does not have to
 # correspond to the script filename:
 #
 function retval = phi_exp (x)
	retval = exp(x) ./ (1+exp(x))
 endfunction

 xs = -10:10
 ys = phi_exp(xs)

 plot(xs,ys)

 title ("A function phi to map values V to a probability-suitable ]0,1[ interval")
 ylabel ("\phi(V")
 xlabel ("V")
 grid on


Provided that such a script is located in a well-known directory of the tool (typically its working directory), it can be executed simply by entering its filename without extension; for example:

.. code:: matlab

 octave:1> phi_exp
 warning: function 'phi_exp' defined within script file 'xxx/phi_exp.m'
 xs =
  -10   -9   -8   [...]


Then a script can be run from the command-line; for example:

.. code:: bash

 $ octave --eval phi_exp.m --persist
 # OR
 $ octave phi_exp.m


Using Scilab
------------

Scilab may be best obtained, on Arch Linux, from the AUR (ex: ``yay -Sy scilab``) by selecting the ``scilab-bin`` option (relying then on prebuilt binaries); it can then be run with: ``scilab``.

Note that the copy/paste behaviour is not consistent with the usual UNIX/X11 one, and that tabulation can be used for auto-completion.



Defining a Function
...................

Let's suppose we want to define :math:`my\_func: x \rightarrow 2.x^{2}+1`.

For that, in Scilab's shell, enter:

.. code:: scilab

 --> function [y] = my_func(x)
   > y = 2*x^2+1
   > endfunction


Then:

.. code:: scilab

 --> my_func(5)
  ans  =
	51.



Plotting a Function
...................

Let's define the support of our function, here computed from 0 to 10 with 50 values: ``my_xs = linspace(0, 10, 50)``. Then just execute ``plot(my_xs, my_func)``.

We experienced rendering issues that prevented a proper display of plots.






Using Octave
------------

`Octave <https://octave.org/>`_ can be installed on Arch Linux with ``pacman -Sy octave``; extra packages may be needed (ex: ``octave-quaternion``, available in the AUR).


The command-line version can be run as ``octave``. Typing ``quit`` at the prompt allows to exit.

The GUI version can be launched with ``octave --force-gui``.



Defining a Function
...................

As already seen, so that it can operate on single values or arrays, a :math:`\phi(x) = e^{x}/(1+e^{x})` function can be defined as:

.. code:: octave

 function retval = phi (x)
   retval = exp(x)./(1+exp(x))
 endfunction





Plotting a Function
...................

We consider first a function of a single variable.

Let ``my_xs = 0:0.2:10`` define the support / display range of our function; then:

.. code:: octave

 my_ys = my_func(my_xs)
 plot(my_xs, my_ys)


A key point is to understand that, for all plots (``plot``, ``mesh``, ``surf``, etc.), the last element to be specified is *not* the function to which the previous elements are to be applied, but directly the final values to plot.

Extra display settings can be added afterwards:

.. code:: octave

 title ("This is my title")
 ylabel ("My ordinate label")
 xlabel ("My abscissa label")
 grid on


This results in:

:raw-html:`<center><img src="octave-basic-plot.png" id="responsive-image-medium"></img></center>`
:raw-latex:`\begin{figure}[h] \centering \includegraphics[scale=0.7]{octave-basic-plot} \end{figure}`


The image can be saved either by using the ``Save As`` GUI menu and typically selecting PNG, or directly from the console/scripts thanks to the following command: ``print("my_plot.png", "-dpng")``.



:raw-html:`<a name="howtos_bottom"></a>`
