.. _Top:


.. title:: Ceylan-HOWTOs: About Version Control Systems

----------------------------------------------
Version Control Systems: in Practice, now, Git
----------------------------------------------


.. role:: raw-html(raw)
   :format: html

.. role:: raw-latex(raw)
   :format: latex


:raw-html:`<a name="howtos_top"></a>`

:raw-html:`<div class="banner"><p><em>Ceylan HOWTOs</em> <a href="http://howtos.esperide.org">browse latest</a> <a href="Ceylan-HOWTOs-english.pdf">get PDF</a> <a href="#howtos_top">go to top</a> <a href="#howtos_toc">go to toc</a> <a href="#howtos_bottom">go to bottom</a> <a href="Ceylan-HOWTOs-overview-english.html">go to HOWTOs</a> <a href="mailto:about(dash)ceylan-howtos(at)esperide(dot)com?subject=[Ceylan-HOWTOs]%20Remark%20about%20VCS">email us</a></p></div>`


:raw-html:`<center><img src="howtos-title.png" id="responsive-image-ultrasmall"></img>`


:Organisation: Copyright (C) 2021-GENERATION_YEAR_TAG Olivier Boudeville
:Contact: about (dash) howtos (at) esperide (dot) com
:Creation date: Saturday, November 20, 2021
:Lastly updated: GENERATION_DATE_TAG


:raw-html:`<a name="howtos_toc"></a>`

.. _`table of contents`:


.. contents:: **Table of Contents**
  :local:
  :depth: 3


:raw-html:`</center>`



Overview
========

No real software development shall happen without the use of a VCS - standing for *Version Control System* - of some sorts, notably in order to track the versions of the source files involved and to ease the collaborative work on them.

Many solutions have been defined for this purpose (CVS, Clearcase, SVN, Mercurial, etc.), but now a single tool is the de facto standard: `Git <https://en.wikipedia.org/wiki/Git)>`_, which is a distributed version control system available as free software; refer to `its website <https://git-scm.com/>`_ for more details.



Git Usage
=========

Beyond the documentation_ relative to its general use, projects have to adopt their own set of conventions - regarding the management of branches, commits, tags, etc - based on their preferences and context.



Recommended General Conventions
-------------------------------

These are certainly very basic and possibly idiosyncratic, yet any VCS content (typically a release branch) should, in our opinion, meet a few criteria in terms of quality.

The ones to which we try to stick are:

- the path (including names) of files and directories should not contain diacritic, special character or spaces - only plain, basic, boring ASCII characters; as separator, prefer dashes (``-``) to underscores (``_``)
- the character case shall be uniform (e.g. directory names starting always or never with a capital letter)
- the language used shall be uniform (e.g. only proper English)
- a commit message shall describe synthetically the modifications operated on the corresponding new filesystem snapshot; such a message, preferably in English, should always start with a capital letter and end with a dot; e.g. "*Fixed the computation of angles.*" or "*Upgraded the Frobnicator to 2.1.*"
- permissions, both for directories and files, shall be uniform and properly set (e.g. no plain file shall be executable)
- the file formats shall be, as much as possible, homogeneous, notably for text files with regard to the line terminators; either only UNIX conventions (only ``LF``; preferred), or only Windows ones (``CRLF``); use ``dos2unix`` whenever necessary, possibly automated through a Git hook
- abbreviations are convenient (e.g. ``br`` for branch, ``co`` for ``checkout``, etc.); they can be defined in one's ``~/.gitconfig``
- a repository should:

  - only include relevant, well-selected binary files (*if any*)
  - neither include generated files (at least no trivially-generated one), such as ``*.o``, ``*.so``, ``*.class`` nor useless/temporary ones (such as ``.~lock.foo.bar#`` or ``commit-30860f7``, ``buz.log``)



Basic Operations
----------------

- **managing branches**:

  - **creating** branches is done thanks to the ``checkout`` command, often abbreviated as ``co`` here
  - to create a branch deriving from the current one (the current ``HEAD``) and switching to it at the same time (performing its co, while inheriting any local changes): ``git co -b my_new_branch``
  - to `create a local branch corresponding to a remote one <https://git-scm.com/book/en/v2/Git-Branching-Remote-Branches>`_ (let's suppose it is named ``some_branch``), assuming that a remote server (e.g. ``my_remote``, possibly ``origin``) has already been declared (e.g. ``git remote add my_remote URL``):

	- first step is to update the remote-tracking branches with ``git fetch my_remote``, then to create the target local branch tracking that remote (upstream) one with: ``git co -b some_branch my_remote/some_branch`` (also switching to it here)
	- a shortcut is to use ``git co --track my_remote/some_branch`` instead
	- even shorter, if the name of the target local branch name does not exist yet and matches exactly matches a name on only one remote, ``git co some_branch`` will suffice

  - to delete a local branch: ``git branch -d my_branch``

- **managing tags**:

  - to list (local) tags: ``git tag``
  - to have information about an already-existing tag: ``git show my_tag``
  - to set a new annotated tag: ``git tag -a foobar-version-2.4.0 -m "Release of the version 2.4.0 of Foobar."``; prefer naming tags differently from branches (e.g. ``foobar-version-2.4.0`` rather than ``foobar-2.4.0``) to spare ambiguities to Git
  - a set tag must be specifically pushed on a remote, for example: ``git push origin my_tag``; all tags can be pushed with ``git push --tags`` (the remote can be implied)
  - to delete a tag that was not pushed: ``git tag --delete my_tag``

- **determining whether a file is in VCS**, knowing that due to ``.gitignore`` rules, ``update-index --skip-worktree``, etc. it is not always obvious:

.. code:: bash

 # Target file is tracked iff is listed by:
 $ git ls-files | grep my_file

 # Or, in order to trigger an error if this target file is not tracked:
 git ls-files --error-unmatch my_file

.. _`checkout`:

- getting the **version of a file as it was at a given commit**:

.. code:: bash

 # Replaces the current version of that file by the designated one:
 $ git checkout COMMIT_ID path/to/the/target/file

 # Outputs on the console the designated version:
 $ git show COMMIT_ID:path/to/the/target/file

 # Outputs on the console the diff between the designated
 # version and the current one:
 #
 $ git show COMMIT_ID:path/to/the/target/file

- listing the **files modified by a given commit**: ``git show --name-only MY_COMMIT_ID`` will print relevant extra information; if wanting only the list of modified files: ``git diff-tree --no-commit-id --name-only -r --pretty COMMIT_ID``



Managing Branches
-----------------

Creating branches allows to separate threads of work (while preserving their lineage) and progress concurrently. Yet often their content will have to converge ultimately; depending on the intent, two use cases can be considered, resulting in different Git uses.


Merge versus Rebase
...................

Here one may want:

- either to **integrate back a development branch** (e.g. ``my-feature``) **in a shared, parent one** (e.g. ``master``): then one shall prefer using ``merge``, in order to keep separate histories and not affect the past one of the shared branch
- or to **resynchronise a development branch** (e.g. ``my-feature``) **on the last version of a shared branch and continue these developments**: then one shall prefer ``rebase``, so that the history of the development branch contains only its own changes (less noise, linear history)

In practice, in order to transfer the changes of a branch A in a branch B:

.. code:: bash

 $ git co B

 # Either first case (integrate development A in master B):
 $ git merge A # or: git pull A

 # Or second one (resynchronise development B on master A):
 $ git rebase A # or: git pull -rebase A


How such a last ``rebase`` of branch A in branch B is done? The bifurcation point of B compared to A is moved from its initial position to the current head of A, on which all changes recorded in B are applied; the resulting history of B looks like if these changes had been directly performed from the version of A designated in this rebase, and thus B can be then directly fast-forwarded to its tip, which comprises both the changes synchronised from A and, then, the ones specifically introduced in B.

Then, to update the remote with these post-rebase commits, ``git push --force-with-lease`` shall be used [#]_.

.. [#] Rather than just performing just a push, having it fail, pulling, and ending up with duplicates of the changes. Should this happen, rewind these changes, for example with: ``git reset --hard <full_hash_of_commit_to_reset_to>``.


More information: `[1] <https://www.atlassian.com/en/git/tutorials/merging-vs-rebasing>`_ or, in French: `[2] <http://codeur-pro.fr/difference-entre-git-merge-et-git-rebase/>`_, `[3] <https://meritis.fr/git-rebase-vs-git-merge-quelles-differences/>`_, `[4] <http://blog.fclement.info/git-merge-et-git-rebase-les-eternels-incompris>`_.



Directly Transferring Changes
.............................

Sometimes, one may want to directly transfer the changes of a derivate branch B in a parent branch A. When one knows for sure that the versions in B shall be preferred in all cases to their counterparts in A (note that a classical merge is already fully able to manage fast-forwards), one may use:

.. code:: bash

 $ git checkout A
 $ git merge -X theirs B

No conflict should arise (`source <https://stackoverflow.com/questions/173919/is-there-a-theirs-version-of-git-merge-s-ours>`_); note that this does *not* imply that the contents of the two branches match.

The same is possible with ``rebase``; for example: ``git rebase -X theirs B``.

Note that ``-X`` a *strategy* option, whereas ``-s`` would be a *merge strategy* option.

Using here ``ours`` rather than ``theirs`` :

- ``-X ours`` uses "our" version of a change *only when there is a conflict*
- whereas ``-s ours`` ignores the content of the other branch entirely (in all cases), and use "our" version instead; ``-s theirs`` does not exist


Another (brutal but sure) way of forcing the content of a branch B to be the same as the one of a branch A is, while B is checked-out, to execute: ``git reset --hard A``. As mentioned previously, push shall be done then with ``git push --force-with-lease``.

Sometimes, we know for sure that a given file must be transferred as it is on a given branch (``some_branch``), as a whole, to the current branch (``current_branch``). Cherry-picking is not exactly what is needed, as `git cherry <https://git-scm.com/docs/git-cherry>`_ deals with commits, not actual contents. Here, `what we presented with checkout <#checkout>`_ may be more appropriate:

.. code:: bash

 $ git checkout current_branch
 # The current location on the branch matters:
 $ git checkout some_branch path/to/the/target/file
 Updated 1 path from 6f154364


Common Procedures
-----------------


Overcoming auto-signed SSL certificate issues
.............................................

To avoid, typically in a company internal setting, errors like:

.. code:: bash

 Cloning into 'XXX'...
 fatal: unable to access 'https://foo.bar.org/XX/XXX/': SSL certificate problem: self signed certificate in certificate chain


the ``http.sslVerify=false`` option may be used, even if it weakens the overall security.

This is typically useful initially:

.. code:: bash

 $ git -c http.sslVerify=false clone https://foo.bar.org/XX/XXX


In order that the next operations (e.g. future pushes) overcome too this problem for the current repository, use from within the current clone:

.. code:: bash

 $ git config http.sslVerify false




Setting the right metadata for the next commits
...............................................

Doing so prevent from having to amend commits a posteriori.

If these information apply for all projects:

.. code:: bash

 $ git config --global user.name "John Doe"
 $ git config --global user.email john.doe@foobar.org


Otherwise shall be done at least on a per-project basis with:

.. code:: bash

 $ git config user.name "John Doe"
 $ git config user.email john.doe@foobar.org


Also ``git config --global --edit`` may be of use (beware to trigger a ``vi`` by accident...).



Performing operation on remotes with no systematic authentication
.................................................................

Using a SSH key pair, hence with its public key declared on said remote, is a relevant approach, safer than from example using a ``~/.netrc`` file.



Updating One's Fork from its Upstream
.....................................

So you forked a repository (let's say it is in ``https://github.com/some_project/some_repo.git``) and made progress - yet in the meantime the upstream repository may also have been updated, and you want to integrate these changes in yours.

First step is to ensure that this repository (designated here as ``upstream`` for convenience) is locally known:

.. code:: bash

 $ git remote add upstream https://github.com/some_project/some_repo.git


Then, from a fully-committed clone of your fork (let's suppose we are using the ``main`` branch in all repositories):

.. code:: bash

 $ git fetch upstream

 # More appropriate than a merge:
 $ git rebase upstream/main

 # Repeatedly, as long as conflicts are found:
 $ git rebase --continue

 # Forced, as otherwise the current branch will deemed to be behind our remote:
 # (hopefully your branch at origin is not protected by a hook; otherwise:
 # 'git checkout -b some_branch', etc.)

 $ git push -f origin main


Creating an empty branch
........................

Rather than creating it from a pre-existing branch and removing all inherited content, prefer:

.. code:: bash

 $ git checkout --orphan my_new_branch


(typically useful for GitHub Pages branches; may then be followed by some adds and ``git commit --allow-empty -m "Initial website."``)



Listing differences with prior versions of a file
.................................................

In order to list the differences of a given file with the previous commits (precisely: of a set of pathspecs), one may use our ``dif-prev.sh`` script, which by default reports the differences with the last committed version. With the ``--all`` option, it lists all differences, until the first addition of this file.



Preventing the commit of a file in VCS that is often locally modified
.....................................................................

One should use `this method <https://stackoverflow.com/questions/1753070/how-do-i-configure-git-to-ignore-some-files-locally>`_:

.. code:: bash

 $ git update-index --skip-worktree <file-list>


The opposite operation is:

.. code:: bash

 $ git update-index --no-skip-worktree <file-list>



Listing the files managed in VCS from the current directory
...........................................................


Use ``git ls-files`` to determine the files that are already managed in VCS, recursively from the current directory.

To list the untracked files (i.e. the files *not* in VCS), use ``git ls-files --others``.



Reducing the size of a repository
.................................

One may use our `list-largest-vcs-blobs.sh <https://github.com/Olivier-Boudeville/Ceylan-Hull/blob/master/list-largest-vcs-blobs.sh>`_ script to detect any larger files that should not be in VCS (e.g. should a colleague have committed by mistake a third-party archive, or unexpected data such as CSV files).

Then install `BFG Repo-Cleaner <https://rtyley.github.io/bfg-repo-cleaner/>`_:

.. code:: bash

 $ mkdir -p ~/Software/bfg-repo-cleaner/
 $ cd $_
 $ mv ~/bfg-1.14.0.jar .
 $ ln -s bfg-1.14.0.jar bfg.jar
 # For example in ~/.bashrc:
 $ alias bfg="java -jar ~/Software/bfg-repo-cleaner/bfg.jar"


All developers should be asked to commit their sources (git add + push), to archive their clone (e.g. in a timestamped ``.xz`` file like ``20220412-archive-clone-foobar.tar.xz``), and to wait until notified that they can create a new clone.

The repository may be then cleaned up (e.g. from large, unnecessary CSV files) in isolation, with:

.. code:: bash

 $ git clone --mirror XXX/foobar.git
 $ bfg --delete-files '*.csv' foobar.git
 $ cd foobar
 $ git reflog expire --expire=now --all && git gc --prune=now --aggressive
 $ git push

Then all developers shall be requested to perform a new clone and to check the fetched content (e.g. with regard to the content of the last branch in which they committed).



Fixing LF vs CRLF End of Line Problems
......................................

Use `Git Attributes <https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes>`_ to specify proper files and paths attributes.

One may define a ``.gitattributes`` file for example with ``*.js eol=lf``, ``* text=auto``, or:

.. code:: bash

 # No CRLF conversion for DOS/Windows batch files.
 # They should be stored with the CRLF line terminators.
 #
 *.bat -crlf



Fixing a commit message
.......................

If no push was done, it is as simple as replacing the former message by a new one, like in:

.. code:: bash

 $ git commit --amend -m "This is a fixed commit message."



Restoring a branch to a past state
..................................

Sometimes mistakes are made, committed and pushed - typically when messing up some merge.

Various operations can be of use:

- to consult a past state (e.g. based on a SHA1) and possibly create a dedicated branch out of it: use ``checkout``
- to selectively remove the changes introduced by specific commits, by adding reverting commits (hence not losing history); use ``revert``; such an operation must be validated thanks to a well-documented commit
- to come back to a past overall state (e.g. a SHA1), losing all changes done since then (hard delete, rewriting history): use ``reset``, with the ``--soft`` option to keep intermediary changes as non-committed, or with the ``--hard`` option to remove all changes; no commit is involved here (newer commits being just forgotten); if satisfied with this new state, it may be validated thanks to ``git push --force origin HEAD`` - provided that the current branch is not protected

See also `these exchanges <https://stackoverflow.com/questions/4114095/how-do-i-revert-a-git-repository-to-a-previous-commit>`_.


Tools
=====


On Most Platforms
-----------------

At least on UNIX, the command-line Git client (``git``) is certainly the best tool. In difficult situations, graphical tools such as ``gitk`` may be of help.

See also our Ceylan-Hull section about `VCS-related scripts <https://hull.esperide.org/#for-version-control-system-vcs>`_.



On Windows
----------

Tools like `TortoiseGit <https://tortoisegit.org/>`_ may foster a view on the usage of Git that is a bit particular, conflating concepts or introducing extra ones (e.g. a ``sync`` command). Apparently also at least some pulls did not reintroduce files just removed from the working directory.

More generally, cloning on a Windows host an UNIX-originating repository comprising symbolic links may induce oddities (e.g. a symlink named ``S`` pointing to ``Foobar`` resulting, on a Windows clone, in a file named ``S`` whose content is, literally, the text ``"Foobar"``, instead of the expected content of the ``Foobar`` file).

Another option is to use Visual Studio Code (``vscode``), which supports natively Git (provided that the command-line version is already installed). One may select ``View -> SCM`` (or ``Ctrl-Shift-G``) for that. Clicking on the "VCS" icon (three rings links by two curves; the third from the top) displays a contextual view offering various associated operations (here based on Git).

We finally preferred using MSYS2 + Git rather than `Git Bash <https://gitforwindows.org/>`_, named "Git for Windows"; `hints <http://source.technology/speed-up-git-bash-on-windows>`_ to speed up these tools may apply.


Inner Workings
==============

Git stores internally every version of every file separately (not as a diff with a parent version) as a blob (an opaque binary content) identified by its (SHA1) hash.

A commit is the identifier of a tree representing the filesystem of interest at a given moment (snapshot). This tree references the files through their SHA1, similarly to a `Merkle tree <https://en.wikipedia.org/wiki/Merkle_tree>`_.

A branch is thus nothing but a pointer on a given commit, and ``HEAD`` designates the current branch. Git stores natively only blobs, trees and commits.

The reported differences in the content of a file or a tree are thus only recreated (established dynamically) by Git commands, they are not natively tracked.



Translations
============

From English to French:

- ``repository`` -> ``dépôt``
- ``to checkout`` -> ``extraire``
- ``to commit`` -> ``valider``
- ``a commit`` -> ``validation``
- ``in VCS`` -> ``en GCL`` (Gestion de Configuration Logicielle)
- ``snapshot`` -> ``instantané`` (de l'état du sous-système de fichiers géré en GCL)
- ``merge`` -> ``fusion``
- ``head`` -> ``tête``
- ``fast-forward`` -> ``avancement direct``
- ``fast-forwarded`` -> ``directement avancée``



Documentation
=============

Many pointers exist, doing a great job in unveiling how Git is to be used.

In English, `Pro GIT <https://git-scm.com/book/en/v2>`_ is surely a reference.

In French:

- `introduction en français <https://perso.liris.cnrs.fr/pierre-antoine.champin/enseignement/intro-git/) de l'IUT Lyon-1>`_
- `cours sur OpenClassrooms <https://openclassrooms.com/fr/courses/1233741-gerez-vos-codes-source-avec-git>`_
- référence incontournable et conseillée : `Pro GIT <https://git-scm.com/book/fr/v2>`_, notamment pour l'explication de `ses rudiments <https://git-scm.com/book/fr/v2/D%C3%A9marrage-rapide-Rudiments-de-Git>`_ puis de son `fonctionnement interne <https://git-scm.com/book/fr/v2/Les-tripes-de-Git-Plomberie-et-porcelaine>`_, à commencer par `ses objets <https://git-scm.com/book/fr/v2/Les-tripes-de-Git-Les-objets-de-Git>`_


:raw-html:`<a name="howtos_bottom"></a>`
